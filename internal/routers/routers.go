package routers

import (
	config "bitcoind_rest_api/cmd/server/config"
	"encoding/json"
	"fmt"
	"github.com/gorilla/mux"
	"io"
	"log"
	"net/http"
	"strings"
)

type Response struct {
	Response string `json:"response"`
	Error    string `json:"error"`
	Message  string `json:"message"`
}

func Initialize(cfg *config.Config) RouterService {
	requestUrl := fmt.Sprintf("http://" + cfg.RPCUser + ":" + cfg.RPCPassword + "@" + cfg.RPCHost + ":" + cfg.RPCPort + "/btcd/")
	return RouterService{
		config: cfg,
		url:    requestUrl,
	}
}

func (rs *RouterService) homePage(w http.ResponseWriter, r *http.Request) {
	//vars := mux.Vars(r)
	//key := vars["id"]
	fmt.Fprintf(w, "Welcome home!")
	json.NewEncoder(w).Encode(Response{
		Response: "Welcome home",
	})
}

func (rs *RouterService) getBlockchainInfo(w http.ResponseWriter, r *http.Request) {
	//vars := mux.Vars(r)
	//key := vars["id"]

	//json.NewEncoder(w).Encode(Response{
	//	Response: "Welcome home",
	//})

	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

	// curl -d '{"jsonrpc": "1.0", "id":"curltest", "method": "getblockcount", "params": [] }' -H 'content-type: text/plain;'     http://bitcoin:reojfist1@192.168.1.16:3333/btcd/

	body := strings.NewReader(`{"jsonrpc": "1.0", "id":"curltest", "method": "getblockchaininfo", "params": [] }`)
	req, err := http.NewRequest("POST", rs.url, body)
	if err != nil {
		log.Fatal("failed to create new request", "error", err)
	}

	req.Header.Set("Content-Type", "text/plain;")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		log.Fatal("failed to do request", "error", err)
	}
	b, err := io.ReadAll(resp.Body)
	if err != nil {
		log.Fatalln(err)
	}
	defer resp.Body.Close()

	json.NewEncoder(w).Encode(string(b))
}

func (rs *RouterService) RouteRequests() {
	myRouter := mux.NewRouter().StrictSlash(true)
	myRouter.HandleFunc("/", rs.homePage)
	myRouter.HandleFunc("/api/getblockchaininfo", rs.getBlockchainInfo)
	log.Fatal(http.ListenAndServe(":10000", myRouter))
}

type RouterService struct {
	config *config.Config
	url    string
}
